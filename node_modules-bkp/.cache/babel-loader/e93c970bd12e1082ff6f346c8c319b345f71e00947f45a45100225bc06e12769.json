{"ast":null,"code":"var _jsxFileName = \"/home/bipul/dashboard-dave/dynamodb-display/src/App.js\",\n  _s = $RefreshSig$();\nimport { message, Skeleton, Table } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tablesData, setTablesData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    fetch(\"https://ayr7fudi20.execute-api.us-east-1.amazonaws.com/Test-stage/data\").then(res => res.json()).then(data => {\n      setLoading(false);\n      // Group data by table_name and generate columns for each table\n      const groupedData = groupAndGenerateColumns(data);\n      setTablesData(groupedData);\n    }).catch(err => {\n      setLoading(false);\n      message.error(\"Couldn't fetch data\");\n    });\n  }, []);\n\n  // Group data by 'table_name' and generate columns\n  const groupAndGenerateColumns = data => {\n    return data.reduce((acc, item) => {\n      const tableName = item.table_name;\n      if (!acc[tableName]) {\n        acc[tableName] = {\n          data: [],\n          columns: generateColumns(item)\n        };\n      }\n      acc[tableName].data.push(item);\n      return acc;\n    }, {});\n  };\n\n  // Generate columns from the first item's keys in each group\n  const generateColumns = item => {\n    return Object.keys(item).filter(key => key !== 'table_name').map(key => ({\n      title: key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\n      // Format and capitalize titles\n      dataIndex: key,\n      key: key\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: 50,\n        backgroundColor: '#004D40',\n        color: '#fff',\n        display: 'flex',\n        alignItems: 'center',\n        padding: 10,\n        fontSize: 20,\n        fontWeight: '600',\n        justifyContent: 'center'\n      },\n      children: \"Dave - Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 18\n    }, this) : Object.entries(tablesData).map(([tableName, {\n      data,\n      columns\n    }], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: tableName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        dataSource: data,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"v/F4Yss2uR78y0dllibQTaZD8G8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["message","Skeleton","Table","useEffect","useState","jsxDEV","_jsxDEV","App","_s","tablesData","setTablesData","loading","setLoading","fetch","then","res","json","data","groupedData","groupAndGenerateColumns","catch","err","error","reduce","acc","item","tableName","table_name","columns","generateColumns","push","Object","keys","filter","key","map","title","replace","l","toUpperCase","dataIndex","children","style","width","height","backgroundColor","color","display","alignItems","padding","fontSize","fontWeight","justifyContent","fileName","_jsxFileName","lineNumber","columnNumber","entries","index","dataSource","_c","$RefreshReg$"],"sources":["/home/bipul/dashboard-dave/dynamodb-display/src/App.js"],"sourcesContent":["import { message, Skeleton, Table } from \"antd\";\nimport { useEffect, useState } from \"react\";\n\nconst App = () => {\n  const [tablesData, setTablesData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(\"https://ayr7fudi20.execute-api.us-east-1.amazonaws.com/Test-stage/data\")\n      .then(res => res.json())\n      .then(data => {\n        setLoading(false);\n        // Group data by table_name and generate columns for each table\n        const groupedData = groupAndGenerateColumns(data);\n        setTablesData(groupedData);\n      })\n      .catch(err => {\n        setLoading(false);\n        message.error(\"Couldn't fetch data\");\n      });\n  }, []);\n\n  // Group data by 'table_name' and generate columns\n  const groupAndGenerateColumns = (data) => {\n    return data.reduce((acc, item) => {\n      const tableName = item.table_name;\n      if (!acc[tableName]) {\n        acc[tableName] = {\n          data: [],\n          columns: generateColumns(item)\n        };\n      }\n      acc[tableName].data.push(item);\n      return acc;\n    }, {});\n  };\n\n  // Generate columns from the first item's keys in each group\n  const generateColumns = (item) => {\n    return Object.keys(item).filter(key => key !== 'table_name').map(key => ({\n      title: key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()), // Format and capitalize titles\n      dataIndex: key,\n      key: key,\n    }));\n  };\n\n  return (\n    <div>\n      <div style={{ width: '100%', height: 50, backgroundColor: '#004D40', color: '#fff', display: 'flex', alignItems: 'center', padding: 10, fontSize: 20, fontWeight: '600', justifyContent: 'center' }}>\n        Dave - Dashboard\n      </div>\n      {loading ? <Skeleton /> : (\n        Object.entries(tablesData).map(([tableName, {data, columns}], index) => (\n          <div key={index}>\n            <h2>{tableName}</h2>\n            <Table dataSource={data} columns={columns} />\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}